from random import *
import pygame
from pygame.locals import *

mapsize=50

#pygame

pygame.init()
screen = pygame.display.set_mode( (600,600) )
pygame.display.set_caption("the game")
clock = pygame.time.Clock()
FPS=120

#joonistamine
tile=pygame.image.load("tile.png")
tile2=pygame.image.load("tile2.png")

###################################
#Wilson

h=None #suunam채lu
history=[] #teekonnam채lu
D=[(0,1),(1,0),(0,-1),(-1,0)]
M=[]

def connected(a,b,d):
    global M
    if a+d[0]<0 or b+d[1]<0:
        return False
    try:
        if M[a+d[0]][b+d[1]]!=0:
            return True
        else:
            return False
    except:
        return False

def islegit(a,b):
    global M
    if a<0:
        return False
    if a>=mapsize:
        return False
    if b<0:
        return False
    if b>=mapsize:
        return False
    try:
        if M[a+1][b+1]!=0 and M[a+1][b]!=0 and M[a][b+1]!=0:
            return False
    except:
        pass
    try:
        if b!=0 and M[a+1][b-1]!=0 and M[a+1][b]!=0 and M[a][b-1]!=0:
            return False
    except:
        pass
    try:
        if a!=0 and M[a-1][b+1]!=0 and M[a-1][b]!=0 and M[a][b+1]!=0:
            return False
    except:
        pass
    try:
        if a!=0 and b!=0 and M[a-1][b-1]!=0 and M[a-1][b]!=0 and M[a][b-1]!=0:
            return False
    except:
        pass
    return True

def move():
    global D
    global h
    global M
##    screen.fill((0,0,0))
##    for i in range(mapsize):
##        for j in range(mapsize):
##            if M[i][j]==2:
##                screen.blit(tile,(i*10,j*10))
##            elif M[i][j]==1:
##                screen.blit(tile2,(i*10,j*10))
##    pygame.display.flip()
    shuffle(D)
    #vaatab, kas juba on 체hendus tekkinud
    for i in D:
        if i!=h and h!=None and connected(a,b,i):
            return i
    #liigub mingis suunas
    for i in D:
        if i!=h and islegit(a+i[0],b+i[1]):
            h=(-i[0],-i[1])
            return i
    return None

def initiate():
    global M
    global D
    for i in range(mapsize):
        for j in range(mapsize):
            if M[i][j]==0 and islegit(i,j):
                t=0
                for k in D:
                    if connected(i,j,k):
                        t=1
                if t!=1:
                    return (i,j)
    return None

for i in range(mapsize):
    t=[]
    for j in range(mapsize):
        t.append(0)
    M.append(t)

#arbitraarne alguspunkt
x=randint(0,mapsize-1)
y=randint(0,mapsize-1)
#hilisemaks liikumiseks
dx,dy=0,0
#esimene klots
M[x][y]=2
#teisendamine piksliteks
x=x*40
y=y*40

#generate
while 1:
    f=initiate()
    if f==None:
        break
    a=f[0]
    b=f[1]
    while 1:
        while M[a][b]==0:
            M[a][b]=1
            history.append((a,b))
            direction=move()
            if direction==None:
                if len(history)<5:
                    for i in history:
                        M[i[0]][i[1]]=3
                        history=[]
                else:
                    for i in history:
                        M[i[0]][i[1]]=0
                        history=[]
                break
            else:
                a+=direction[0]
                b+=direction[1]
        #kui on kinnitamata punkt, kustutab vahepealse silmuse
        if M[a][b]==1:
            t=0
            newh=[]
            for i in history:
                if i==(a,b):
                    t=1
                if t==1:
                    M[i[0]][i[1]]=0
                else:
                    newh.append(i)
            history=newh
            h=None
            continue
        #kui on kinnitatud punkt, loob uue pinna
        elif M[a][b]==2:
            #input("bulid")
            for i in history:
                M[i[0]][i[1]]=2
            history=[]
            h=None
        break

#############################################
#background
##screen.fill((0,0,0))
##for i in range(mapsize):
##    for j in range(mapsize):
##        if M[i][j]==2:
##            screen.blit(tile,(i*40,j*40))
##pygame.display.flip()

##############################################

while True:

    clock.tick(FPS)
    #m채ngja liikumine
    event = pygame.event.poll()
    if event.type == pygame.QUIT:
        break
    if event.type == pygame.KEYDOWN:
        if event.key==K_w:
            dy=-1
        if event.key==K_s:
            dy=1
        if event.key==K_d:
            dx=1
        if event.key==K_a:
            dx=-1
    if event.type == pygame.KEYUP:
        if event.key==K_w:
            dy=0
        if event.key==K_s:
            dy=0
        if event.key==K_d:
            dx=0
        if event.key==K_a:
            dx=0
    nurgad=((x,y),(x+19,y),(x,y+19),(x+19,y+19))
    xok=1
    yok=1
    for i in nurgad:
        if i[0]+dx<0 or i[0]+dx>=mapsize*40 or M[(i[0]+dx)//40][i[1]//40]!=2:
            xok=0
        if i[1]+dy<0 or i[1]+dy>=mapsize*40 or M[i[0]//40][(i[1]+dy)//40]!=2:
            yok=0
    if xok==1:
        x+=dx
    if yok==1:
        y+=dy
    #tulemuse kuvamine
    screen.fill((0,0,0))
    for i in range(15):
        a=x//40-7+i
        if a>=0 and a<mapsize:
            for j in range(15):
                b=y//40-7+j
                if b>=0 and b<mapsize and M[a][b]==2:
                    screen.blit(tile,(i*40-x%40+30,j*40-y%40+30))
    screen.blit(tile2,(310,310))
    screen.fill((0,0,0),(0,0,40,600))
    screen.fill((0,0,0),(0,0,600,40))
    screen.fill((0,0,0),(560,0,40,600))
    screen.fill((0,0,0),(0,560,600,40))
    pygame.display.flip()
    
pygame.quit()
